<?xml version="1.0" standalone="yes"?>

<templates>
<template kind="1" name="Type.Factory" default="false" signature="false">
    <regex>(.+)Factory</regex>
    <example>MessageFactory</example>
    <text>/**
 * A factory for creating ${e.g(1)} objects.
 */</text>
    <template kind="3" name="Type.Factory.Method.create" default="false" signature="false">
            <regex>create(.+)</regex>
            <example>createMessage</example>
            <text>/**
 * Creates a new ${e.p().g(1)} object.
 */</text>
    </template>
</template>
<template kind="1" name="Type.Observer" default="false" signature="false">
    <regex>(.+)Observer</regex>
    <example>ImageObserver</example>
    <text>/**
 * An asynchronous update interface for receiving notifications
 * about ${e.g(1)} information as the ${e.g(1)} is constructed.
 */</text>
    <template kind="3" name="Type.Observer.Method.update" default="false" signature="false">
            <regex>.*</regex>
            <example>imageUpdate</example>
            <text>/**
 * This method is called when information about an ${e.p().g(1)}
 * which was previously requested using an asynchronous
 * interface becomes available.
 */</text>
    </template>
</template>
<template kind="1" name="Type.Listener" default="false" signature="false">
    <regex>(.+)Listener</regex>
    <example>AutodocListener</example>
    <text>/**
 * The listener interface for receiving ${e.g(1).fl()} events.
 * The class that is interested in processing a ${e.g(1).fl()}
 * event implements this interface, and the object created
 * with that class is registered with a component using the
 * component's &lt;code&gt;add${e.g(1)}Listener&lt;code&gt; method. When
 * the ${e.g(1).fl()} event occurs, that object's appropriate
 * method is invoked.
 *
 * @see ${e.g(1)}Event
 */</text>
    <template kind="3" name="Type.Listener.Method.created" default="false" signature="false">
            <regex>(.*)Created</regex>
            <example>autodocCreated</example>
            <text>/**
 * Invoked when ${e.g(1).rs()} is created.
 */</text>
    </template>
    <template kind="3" name="Type.Listener.Method.updated" default="false" signature="false">
            <regex>(.*)Updated</regex>
            <example>autodocUpdated</example>
            <text>/**
 * Invoked when ${e.g(1).rs()} update occurs.
 */</text>
    </template>
</template>
<template kind="1" name="Type.Default" default="true" signature="false">
    <regex>.+</regex>
    <example>ExampleType</example>
    <text>/**
 * &lt;ul&gt;
 * &lt;li&gt;Copyright 2017 Shava. Todos los derechos reservados.&lt;/li&gt;
 * &lt;/ul&gt; 
 *
## type: class|interface|enum
 * La ${e.getType().fu()} ${e}.
 * @author OSIS
 * @version 1.0 , ${date}
 */</text>
</template>
<template kind="2" name="Field.fPrefix" default="false" signature="false">
    <regex>f([A-Z].+)</regex>
    <example>fExampleMember</example>
    <text>/**
 * El ${e.g(1).rsfl()}.
 */</text>
</template>
<template kind="2" name="Field.thePrefix" default="false" signature="false">
    <regex>the[A-Z].+</regex>
    <example>theNumberOfQuestions</example>
    <text>/**
 * ${e.rsfu()}.
 */</text>
</template>
<template kind="2" name="Field.Default" default="true" signature="false">
    <regex>.+</regex>
    <example>numberOfQuestions</example>
    <text>/**
#if(${e.isStatic()} &amp;&amp; ${e.isFinal()})
 * La Constante ${e}.
#else
 * La ${e.rs()}.
#end
 */</text>
</template>
<template kind="3" name="Method.getInstance" default="false" signature="false">
    <regex>getInstance</regex>
    <example>getInstance</example>
    <text>/**
 * Obtiene la instancia de ${e.getDeclaringType()}.
 * 
 * @return instancia de ${e.getDeclaringType()}
 */</text>
</template>
<template kind="3" name="Method.Getter" default="false" signature="true">
    <regex>\S+ get(\S+)\(.*\)</regex>
    <example>int getNumberOfQuestions()</example>
    <text>/**
 * Obtiene ${e.g(1).rsfl()}.
 * 
 * @return ${e.g(1).rsfl()}
 */</text>
</template>
<template kind="3" name="Method.Setter" default="false" signature="true">
    <regex>void set(\S+)\([^,]+ ([^,]+)\)</regex>
    <example>void setNumberOfQuestions(int number)</example>
    <text>/**
 * Establece el ${e.g(1).rsfl()}.
 * 
 * @param ${e.g(2)} el new ${e.g(1).rsfl()}
 */</text>
</template>
<template kind="3" name="Method.boolean Getter" default="false" signature="true">
    <regex>boolean is(.+)\(.*\)</regex>
    <example>boolean isBlue()</example>
    <text>/**
 * Comprueba si es ${e.g(1).rsfl()}.
 * 
 * @return true, si es ${e.g(1).rsfl()}
 */</text>
</template>
<template kind="3" name="Method.Main-Method" default="false" signature="true">
    <regex>void main\(String\[\] (\S+)\)</regex>
    <example>void main(String[] args)</example>
    <text>/**
 * El metodo principal.
 * 
 * @param ${e.g(1)} los argumentos
 */</text>
</template>
<template kind="3" name="Method.Constructor" default="false" signature="true">
    <regex>(\S+)\(.*\)</regex>
    <example>SimpleClass()</example>
    <text>/**
 * Instancia un nuevo ${e.g(1).rsfl()}.
 */</text>
</template>
<template kind="3" name="Method.Returns void" default="false" signature="true">
    <regex>void (.+)\(.*\)</regex>
    <example>void doSomething()</example>
    <text>/**
 * ${e.g(1).rsfu()}.
 */</text>
</template>
<template kind="3" name="Method.Returns boolean" default="false" signature="true">
    <regex>boolean (\S+)\(.*\)</regex>
    <example>boolean doSomething(int parameter)</example>
    <text>/**
 * ${e.g(1).rsfu()}.
 * 
 * @return true, en caso de exito
 */</text>
</template>
<template kind="3" name="Method.Returns other" default="false" signature="true">
    <regex>(\S+) (\S+)\(.*\)</regex>
    <example>ReturnValue calculateSomething()</example>
    <text>/**
 * ${e.g(2).rsfu()}.
 * 
 * @return the ${e.g(1).rsfl()}
 */</text>
</template>
<template kind="3" name="Method.Default" default="true" signature="false">
    <regex>.+</regex>
    <example>doSomething</example>
    <text>/**
## Actually this is not used, because there
## are templates for different return types
 * ${e.rsfu()}.
 */</text>
</template>
<template kind="4" name="Parameter.Generic Type Parameter" default="false" signature="false">
    <regex>&lt;(.+)&gt;</regex>
    <example>&lt;E&gt;</example>
    <text>/**
#if(${e.g(1)} == 'E')
 * @param ${e} el tipo de elemento
#elseif(${e.g(1)} == 'K')
 * @param ${e} el tipo de clave
#elseif(${e.g(1)} == 'N')
 * @param ${e} el tipo de numero
#elseif(${e.g(1)} == 'V')
 * @param ${e} el tipo de valor
#else
 * @param ${e} el tipo generico
#end
 */</text>
</template>
<template kind="4" name="Parameter.compUnit" default="false" signature="false">
    <regex>compUnit</regex>
    <example>compUnit</example>
    <text>/**
## Example for shortcuts
 * @param ${e} la unidad de compilaci&#243;n
 */</text>
</template>
<template kind="4" name="Parameter.pPrefix" default="false" signature="false">
    <regex>p([A-Z].+)</regex>
    <example>pField</example>
    <text>/**
 * @param ${e} el ${e.g(1).rsfl()} 
 */</text>
</template>
<template kind="4" name="Parameter.Default" default="true" signature="false">
    <regex>.+</regex>
    <example>simpleParameter</example>
    <text>/**
 * @param ${e} el ${e.rsfl()}
 */</text>
</template>
<template kind="5" name="Exception.IOException" default="false" signature="false">
    <regex>IOException</regex>
    <example>IOException</example>
    <text>/**
 * @throws ${e} Se&#241;ales de que una excepci&#243;n de E / S se ha producido.
 */</text>
</template>
<template kind="5" name="Exception.Default" default="true" signature="false">
    <regex>.+</regex>
    <example>ExampleException</example>
    <text>/**
 * @throws ${e} the ${e.sfl()}
 */</text>
</template>
</templates>
